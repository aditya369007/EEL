
newproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000075c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000075c  000007f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  00800064  00800064  000007f4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000f48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001084  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000554  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e7  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00002cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bc  00000000  00000000  00002d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069c  00000000  00000000  00003218  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  000038b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	57 c0       	rjmp	.+174    	; 0xb0 <__ctors_end>
   2:	89 c2       	rjmp	.+1298   	; 0x516 <__vector_1>
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	6f c0       	rjmp	.+222    	; 0xe6 <__bad_interrupt>
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	6d c0       	rjmp	.+218    	; 0xe6 <__bad_interrupt>
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	6b c0       	rjmp	.+214    	; 0xe6 <__bad_interrupt>
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	69 c0       	rjmp	.+210    	; 0xe6 <__bad_interrupt>
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	67 c0       	rjmp	.+206    	; 0xe6 <__bad_interrupt>
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	65 c0       	rjmp	.+202    	; 0xe6 <__bad_interrupt>
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	63 c0       	rjmp	.+198    	; 0xe6 <__bad_interrupt>
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	61 c0       	rjmp	.+194    	; 0xe6 <__bad_interrupt>
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>

00000026 <usbDescriptorHidReport>:
  26:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
  36:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 03     ..%...u.....u...
  46:	05 01 09 30 09 31 09 38 15 81 25 7f 75 08 95 03     ...0.1.8..%.u...
  56:	81 06 c0 c0                                         ....

0000005a <usbDescriptorConfiguration>:
  5a:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
  6a:	00 00 09 21 01 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
  7a:	00 64                                               .d

0000007c <usbDescriptorDevice>:
  7c:	12 01 10 01 00 00 00 08 c0 16 e8 03 00 01 01 02     ................
  8c:	00 01                                               ..

0000008e <usbDescriptorStringDevice>:
  8e:	0c 03 52 00 45 00 48 00 4d 00 41 00                 ..R.E.H.M.A.

0000009a <usbDescriptorStringVendor>:
  9a:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  aa:	74 00                                               t.

000000ac <usbDescriptorString0>:
  ac:	04 03 09 04                                         ....

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf e5       	ldi	r28, 0x5F	; 95
  b6:	d4 e0       	ldi	r29, 0x04	; 4
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	a0 e6       	ldi	r26, 0x60	; 96
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	ec e5       	ldi	r30, 0x5C	; 92
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
  c8:	05 90       	lpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a4 36       	cpi	r26, 0x64	; 100
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	a4 e6       	ldi	r26, 0x64	; 100
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a2 3a       	cpi	r26, 0xA2	; 162
  de:	b1 07       	cpc	r27, r17
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	27 d0       	rcall	.+78     	; 0x132 <main>
  e4:	39 c3       	rjmp	.+1650   	; 0x758 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <usbFunctionSetup>:
}

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
  e8:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
  ea:	80 81       	ld	r24, Z
  ec:	80 76       	andi	r24, 0x60	; 96
  ee:	80 32       	cpi	r24, 0x20	; 32
  f0:	e1 f4       	brne	.+56     	; 0x12a <usbFunctionSetup+0x42>
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
  f2:	81 81       	ldd	r24, Z+1	; 0x01
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	41 f4       	brne	.+16     	; 0x108 <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
  f8:	84 e6       	ldi	r24, 0x64	; 100
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 87 00 	sts	0x0087, r25
 100:	80 93 86 00 	sts	0x0086, r24
            return sizeof(reportBuffer);
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	41 f4       	brne	.+16     	; 0x11c <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
 10c:	88 e6       	ldi	r24, 0x68	; 104
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 87 00 	sts	0x0087, r25
 114:	80 93 86 00 	sts	0x0086, r24
            return 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 11c:	8a 30       	cpi	r24, 0x0A	; 10
 11e:	39 f4       	brne	.+14     	; 0x12e <usbFunctionSetup+0x46>
            idleRate = rq->wValue.bytes[1];
 120:	83 81       	ldd	r24, Z+3	; 0x03
 122:	80 93 68 00 	sts	0x0068, r24
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	08 95       	ret
 12e:	80 e0       	ldi	r24, 0x00	; 0
}
 130:	08 95       	ret

00000132 <main>:

int __attribute__((noreturn)) main(void)
{
uchar   i;

    wdt_enable(WDTO_1S);
 132:	2e e0       	ldi	r18, 0x0E	; 14
 134:	88 e1       	ldi	r24, 0x18	; 24
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	a8 95       	wdr
 13e:	81 bd       	out	0x21, r24	; 33
 140:	0f be       	out	0x3f, r0	; 63
 142:	21 bd       	out	0x21, r18	; 33
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
 144:	c2 d1       	rcall	.+900    	; 0x4ca <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 146:	8c 9a       	sbi	0x11, 4	; 17
 148:	8f ef       	ldi	r24, 0xFF	; 255
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
 14a:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	ef e9       	ldi	r30, 0x9F	; 159
 14e:	ff e0       	ldi	r31, 0x0F	; 15
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x1e>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x24>
 156:	00 00       	nop
 158:	81 50       	subi	r24, 0x01	; 1
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
 15a:	b9 f7       	brne	.-18     	; 0x14a <main+0x18>
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
 15c:	8c 98       	cbi	0x11, 4	; 17
    sei();
 15e:	78 94       	sei
    DBG1(0x01, 0, 0);       /* debug output: main loop starts */
    for(;;){                /* main event loop */
        DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
        wdt_reset();
        usbPoll();
        if(usbInterruptIsReady()){
 160:	c7 e7       	ldi	r28, 0x77	; 119
 162:	d0 e0       	ldi	r29, 0x00	; 0
static void advanceCircleByFixedAngle(void)
{
char    d;

#define DIVIDE_BY_64(val)  (val + (val > 0 ? 32 : -32)) >> 6    /* rounding divide */
    reportBuffer.dx = d = DIVIDE_BY_64(cosinus);
 164:	0f 2e       	mov	r0, r31
 166:	f5 e6       	ldi	r31, 0x65	; 101
 168:	ef 2e       	mov	r14, r31
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	ff 2e       	mov	r15, r31
 16e:	f0 2d       	mov	r31, r0
    sinus += d;
    reportBuffer.dy = d = DIVIDE_BY_64(sinus);
 170:	06 e6       	ldi	r16, 0x66	; 102
 172:	10 e0       	ldi	r17, 0x00	; 0
        usbPoll();
        if(usbInterruptIsReady()){
            /* called after every poll of the interrupt endpoint */
            advanceCircleByFixedAngle();
            DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
 174:	0f 2e       	mov	r0, r31
 176:	fe ef       	ldi	r31, 0xFE	; 254
 178:	cf 2e       	mov	r12, r31
 17a:	ff ef       	ldi	r31, 0xFF	; 255
 17c:	df 2e       	mov	r13, r31
 17e:	f0 2d       	mov	r31, r0
 180:	c0 0e       	add	r12, r16
 182:	d1 1e       	adc	r13, r17
char    d;

#define DIVIDE_BY_64(val)  (val + (val > 0 ? 32 : -32)) >> 6    /* rounding divide */
    reportBuffer.dx = d = DIVIDE_BY_64(cosinus);
    sinus += d;
    reportBuffer.dy = d = DIVIDE_BY_64(sinus);
 184:	0f 2e       	mov	r0, r31
 186:	f0 ee       	ldi	r31, 0xE0	; 224
 188:	af 2e       	mov	r10, r31
 18a:	ff ef       	ldi	r31, 0xFF	; 255
 18c:	bf 2e       	mov	r11, r31
 18e:	f0 2d       	mov	r31, r0
    usbDeviceConnect();
    sei();
    DBG1(0x01, 0, 0);       /* debug output: main loop starts */
    for(;;){                /* main event loop */
        DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
        wdt_reset();
 190:	a8 95       	wdr
        usbPoll();
 192:	6d d0       	rcall	.+218    	; 0x26e <usbPoll>
        if(usbInterruptIsReady()){
 194:	88 81       	ld	r24, Y
 196:	84 ff       	sbrs	r24, 4
 198:	fb cf       	rjmp	.-10     	; 0x190 <main+0x5e>
static void advanceCircleByFixedAngle(void)
{
char    d;

#define DIVIDE_BY_64(val)  (val + (val > 0 ? 32 : -32)) >> 6    /* rounding divide */
    reportBuffer.dx = d = DIVIDE_BY_64(cosinus);
 19a:	40 91 69 00 	lds	r20, 0x0069
 19e:	50 91 6a 00 	lds	r21, 0x006A
 1a2:	14 16       	cp	r1, r20
 1a4:	15 06       	cpc	r1, r21
 1a6:	1c f4       	brge	.+6      	; 0x1ae <main+0x7c>
 1a8:	80 e2       	ldi	r24, 0x20	; 32
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <main+0x7e>
 1ae:	c5 01       	movw	r24, r10
 1b0:	84 0f       	add	r24, r20
 1b2:	95 1f       	adc	r25, r21
 1b4:	9c 01       	movw	r18, r24
 1b6:	02 2e       	mov	r0, r18
 1b8:	23 2f       	mov	r18, r19
 1ba:	00 0c       	add	r0, r0
 1bc:	22 1f       	adc	r18, r18
 1be:	33 0b       	sbc	r19, r19
 1c0:	00 0c       	add	r0, r0
 1c2:	22 1f       	adc	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	f7 01       	movw	r30, r14
 1c8:	20 83       	st	Z, r18
    sinus += d;
 1ca:	80 91 60 00 	lds	r24, 0x0060
 1ce:	90 91 61 00 	lds	r25, 0x0061
 1d2:	bc 01       	movw	r22, r24
 1d4:	62 0f       	add	r22, r18
 1d6:	71 1d       	adc	r23, r1
 1d8:	9b 01       	movw	r18, r22
 1da:	70 93 61 00 	sts	0x0061, r23
 1de:	60 93 60 00 	sts	0x0060, r22
    reportBuffer.dy = d = DIVIDE_BY_64(sinus);
 1e2:	16 16       	cp	r1, r22
 1e4:	17 06       	cpc	r1, r23
 1e6:	1c f4       	brge	.+6      	; 0x1ee <main+0xbc>
 1e8:	80 e2       	ldi	r24, 0x20	; 32
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <main+0xbe>
 1ee:	c5 01       	movw	r24, r10
 1f0:	82 0f       	add	r24, r18
 1f2:	93 1f       	adc	r25, r19
 1f4:	08 2e       	mov	r0, r24
 1f6:	89 2f       	mov	r24, r25
 1f8:	00 0c       	add	r0, r0
 1fa:	88 1f       	adc	r24, r24
 1fc:	99 0b       	sbc	r25, r25
 1fe:	00 0c       	add	r0, r0
 200:	88 1f       	adc	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	f8 01       	movw	r30, r16
 206:	80 83       	st	Z, r24
    cosinus -= d;
 208:	9a 01       	movw	r18, r20
 20a:	28 1b       	sub	r18, r24
 20c:	31 09       	sbc	r19, r1
 20e:	30 93 6a 00 	sts	0x006A, r19
 212:	20 93 69 00 	sts	0x0069, r18
        usbPoll();
        if(usbInterruptIsReady()){
            /* called after every poll of the interrupt endpoint */
            advanceCircleByFixedAngle();
            DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
 216:	c6 01       	movw	r24, r12
 218:	64 e0       	ldi	r22, 0x04	; 4
 21a:	01 d0       	rcall	.+2      	; 0x21e <usbSetInterrupt>
 21c:	b9 cf       	rjmp	.-142    	; 0x190 <main+0x5e>

0000021e <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 226:	20 91 77 00 	lds	r18, 0x0077
 22a:	24 ff       	sbrs	r18, 4
 22c:	07 c0       	rjmp	.+14     	; 0x23c <usbSetInterrupt+0x1e>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 22e:	30 91 78 00 	lds	r19, 0x0078
 232:	28 e8       	ldi	r18, 0x88	; 136
 234:	23 27       	eor	r18, r19
 236:	20 93 78 00 	sts	0x0078, r18
 23a:	03 c0       	rjmp	.+6      	; 0x242 <usbSetInterrupt+0x24>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 23c:	2a e5       	ldi	r18, 0x5A	; 90
 23e:	20 93 77 00 	sts	0x0077, r18
 242:	e8 2f       	mov	r30, r24
 244:	f9 2f       	mov	r31, r25
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 246:	8c 2f       	mov	r24, r28
 248:	a9 e7       	ldi	r26, 0x79	; 121
 24a:	b0 e0       	ldi	r27, 0x00	; 0
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 24c:	91 91       	ld	r25, Z+
 24e:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 250:	81 50       	subi	r24, 0x01	; 1
 252:	e1 f7       	brne	.-8      	; 0x24c <usbSetInterrupt+0x2e>
    usbCrc16Append(&txStatus->buffer[1], len);
 254:	09 e7       	ldi	r16, 0x79	; 121
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	c8 01       	movw	r24, r16
 25a:	6c 2f       	mov	r22, r28
 25c:	58 d1       	rcall	.+688    	; 0x50e <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 25e:	cc 5f       	subi	r28, 0xFC	; 252
 260:	f8 01       	movw	r30, r16
 262:	32 97       	sbiw	r30, 0x02	; 2
 264:	c0 83       	st	Z, r28
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 272:	80 91 88 00 	lds	r24, 0x0088
 276:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 278:	0a f4       	brpl	.+2      	; 0x27c <usbPoll+0xe>
 27a:	b4 c0       	rjmp	.+360    	; 0x3e4 <usbPoll+0x176>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 27c:	20 91 85 00 	lds	r18, 0x0085
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 280:	90 91 84 00 	lds	r25, 0x0084
 284:	9d 32       	cpi	r25, 0x2D	; 45
 286:	09 f0       	breq	.+2      	; 0x28a <usbPoll+0x1c>
 288:	ab c0       	rjmp	.+342    	; 0x3e0 <usbPoll+0x172>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 28a:	88 30       	cpi	r24, 0x08	; 8
 28c:	09 f0       	breq	.+2      	; 0x290 <usbPoll+0x22>
 28e:	a8 c0       	rjmp	.+336    	; 0x3e0 <usbPoll+0x172>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 290:	cc e0       	ldi	r28, 0x0C	; 12
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	c2 1b       	sub	r28, r18
 296:	d1 09       	sbc	r29, r1
 298:	c4 57       	subi	r28, 0x74	; 116
 29a:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 29c:	83 ec       	ldi	r24, 0xC3	; 195
 29e:	80 93 6c 00 	sts	0x006C, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 2a2:	8a e5       	ldi	r24, 0x5A	; 90
 2a4:	80 93 62 00 	sts	0x0062, r24
        usbMsgFlags = 0;
 2a8:	10 92 6b 00 	sts	0x006B, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 2ac:	88 81       	ld	r24, Y
 2ae:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <usbPoll+0x4a>
            replyLen = usbFunctionSetup(data);
 2b2:	ce 01       	movw	r24, r28
 2b4:	19 df       	rcall	.-462    	; 0xe8 <usbFunctionSetup>
 2b6:	8b c0       	rjmp	.+278    	; 0x3ce <usbPoll+0x160>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 2b8:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 2ba:	10 92 75 00 	sts	0x0075, r1
    SWITCH_START(rq->bRequest)
 2be:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 2c0:	88 23       	and	r24, r24
 2c2:	31 f4       	brne	.+12     	; 0x2d0 <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 2c4:	10 92 76 00 	sts	0x0076, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 2c8:	25 e7       	ldi	r18, 0x75	; 117
 2ca:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	7b c0       	rjmp	.+246    	; 0x3c6 <usbPoll+0x158>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 2d0:	85 30       	cpi	r24, 0x05	; 5
 2d2:	31 f4       	brne	.+12     	; 0x2e0 <usbPoll+0x72>
        usbNewDeviceAddr = value;
 2d4:	90 93 89 00 	sts	0x0089, r25
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 2d8:	25 e7       	ldi	r18, 0x75	; 117
 2da:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	73 c0       	rjmp	.+230    	; 0x3c6 <usbPoll+0x158>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 2e0:	86 30       	cpi	r24, 0x06	; 6
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <usbPoll+0x78>
 2e4:	50 c0       	rjmp	.+160    	; 0x386 <usbPoll+0x118>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	41 f4       	brne	.+16     	; 0x2fc <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 2ec:	8c e7       	ldi	r24, 0x7C	; 124
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	90 93 87 00 	sts	0x0087, r25
 2f4:	80 93 86 00 	sts	0x0086, r24
 2f8:	82 e1       	ldi	r24, 0x12	; 18
 2fa:	41 c0       	rjmp	.+130    	; 0x37e <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 2fc:	82 30       	cpi	r24, 0x02	; 2
 2fe:	41 f4       	brne	.+16     	; 0x310 <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 300:	8a e5       	ldi	r24, 0x5A	; 90
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	90 93 87 00 	sts	0x0087, r25
 308:	80 93 86 00 	sts	0x0086, r24
 30c:	82 e2       	ldi	r24, 0x22	; 34
 30e:	37 c0       	rjmp	.+110    	; 0x37e <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 310:	83 30       	cpi	r24, 0x03	; 3
 312:	f1 f4       	brne	.+60     	; 0x350 <usbPoll+0xe2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 314:	99 23       	and	r25, r25
 316:	41 f4       	brne	.+16     	; 0x328 <usbPoll+0xba>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 318:	8c ea       	ldi	r24, 0xAC	; 172
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	90 93 87 00 	sts	0x0087, r25
 320:	80 93 86 00 	sts	0x0086, r24
 324:	84 e0       	ldi	r24, 0x04	; 4
 326:	2b c0       	rjmp	.+86     	; 0x37e <usbPoll+0x110>
        SWITCH_CASE(1)
 328:	91 30       	cpi	r25, 0x01	; 1
 32a:	41 f4       	brne	.+16     	; 0x33c <usbPoll+0xce>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 32c:	8a e9       	ldi	r24, 0x9A	; 154
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	90 93 87 00 	sts	0x0087, r25
 334:	80 93 86 00 	sts	0x0086, r24
 338:	82 e1       	ldi	r24, 0x12	; 18
 33a:	21 c0       	rjmp	.+66     	; 0x37e <usbPoll+0x110>
        SWITCH_CASE(2)
 33c:	92 30       	cpi	r25, 0x02	; 2
 33e:	e1 f4       	brne	.+56     	; 0x378 <usbPoll+0x10a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 340:	8e e8       	ldi	r24, 0x8E	; 142
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 87 00 	sts	0x0087, r25
 348:	80 93 86 00 	sts	0x0086, r24
 34c:	8c e0       	ldi	r24, 0x0C	; 12
 34e:	17 c0       	rjmp	.+46     	; 0x37e <usbPoll+0x110>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 350:	81 32       	cpi	r24, 0x21	; 33
 352:	41 f4       	brne	.+16     	; 0x364 <usbPoll+0xf6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 354:	8c e6       	ldi	r24, 0x6C	; 108
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 87 00 	sts	0x0087, r25
 35c:	80 93 86 00 	sts	0x0086, r24
 360:	89 e0       	ldi	r24, 0x09	; 9
 362:	0d c0       	rjmp	.+26     	; 0x37e <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 364:	82 32       	cpi	r24, 0x22	; 34
 366:	51 f4       	brne	.+20     	; 0x37c <usbPoll+0x10e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 368:	86 e2       	ldi	r24, 0x26	; 38
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	90 93 87 00 	sts	0x0087, r25
 370:	80 93 86 00 	sts	0x0086, r24
 374:	84 e3       	ldi	r24, 0x34	; 52
 376:	03 c0       	rjmp	.+6      	; 0x37e <usbPoll+0x110>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	01 c0       	rjmp	.+2      	; 0x37e <usbPoll+0x110>
 37c:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 37e:	90 e4       	ldi	r25, 0x40	; 64
 380:	90 93 6b 00 	sts	0x006B, r25
 384:	24 c0       	rjmp	.+72     	; 0x3ce <usbPoll+0x160>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 386:	88 30       	cpi	r24, 0x08	; 8
 388:	99 f0       	breq	.+38     	; 0x3b0 <usbPoll+0x142>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 38a:	89 30       	cpi	r24, 0x09	; 9
 38c:	31 f4       	brne	.+12     	; 0x39a <usbPoll+0x12c>
        usbConfiguration = value;
 38e:	90 93 8b 00 	sts	0x008B, r25
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 392:	25 e7       	ldi	r18, 0x75	; 117
 394:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	16 c0       	rjmp	.+44     	; 0x3c6 <usbPoll+0x158>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 39a:	8a 30       	cpi	r24, 0x0A	; 10
 39c:	69 f0       	breq	.+26     	; 0x3b8 <usbPoll+0x14a>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 39e:	8b 30       	cpi	r24, 0x0B	; 11
 3a0:	79 f4       	brne	.+30     	; 0x3c0 <usbPoll+0x152>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 3a2:	8b e4       	ldi	r24, 0x4B	; 75
 3a4:	80 93 78 00 	sts	0x0078, r24
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 3a8:	25 e7       	ldi	r18, 0x75	; 117
 3aa:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0b c0       	rjmp	.+22     	; 0x3c6 <usbPoll+0x158>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 3b0:	2b e8       	ldi	r18, 0x8B	; 139
 3b2:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 3b8:	25 e7       	ldi	r18, 0x75	; 117
 3ba:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 3c0:	25 e7       	ldi	r18, 0x75	; 117
 3c2:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 3c4:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 3c6:	30 93 87 00 	sts	0x0087, r19
 3ca:	20 93 86 00 	sts	0x0086, r18
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 3ce:	9f 81       	ldd	r25, Y+7	; 0x07
 3d0:	99 23       	and	r25, r25
 3d2:	21 f4       	brne	.+8      	; 0x3dc <usbPoll+0x16e>
 3d4:	9e 81       	ldd	r25, Y+6	; 0x06
 3d6:	98 17       	cp	r25, r24
 3d8:	08 f4       	brcc	.+2      	; 0x3dc <usbPoll+0x16e>
 3da:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 3dc:	80 93 63 00 	sts	0x0063, r24
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 3e0:	10 92 88 00 	sts	0x0088, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 3e4:	80 91 62 00 	lds	r24, 0x0062
 3e8:	84 ff       	sbrs	r24, 4
 3ea:	58 c0       	rjmp	.+176    	; 0x49c <__stack+0x3d>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 3ec:	80 91 63 00 	lds	r24, 0x0063
 3f0:	8f 3f       	cpi	r24, 0xFF	; 255
 3f2:	09 f4       	brne	.+2      	; 0x3f6 <usbPoll+0x188>
 3f4:	53 c0       	rjmp	.+166    	; 0x49c <__stack+0x3d>
 3f6:	c8 2f       	mov	r28, r24
 3f8:	89 30       	cpi	r24, 0x09	; 9
 3fa:	08 f0       	brcs	.+2      	; 0x3fe <usbPoll+0x190>
 3fc:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 3fe:	8c 1b       	sub	r24, r28
 400:	80 93 63 00 	sts	0x0063, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 404:	90 91 6c 00 	lds	r25, 0x006C
 408:	88 e8       	ldi	r24, 0x88	; 136
 40a:	89 27       	eor	r24, r25
 40c:	80 93 6c 00 	sts	0x006C, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 410:	cc 23       	and	r28, r28
 412:	09 f4       	brne	.+2      	; 0x416 <usbPoll+0x1a8>
 414:	51 c0       	rjmp	.+162    	; 0x4b8 <__stack+0x59>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 416:	20 91 86 00 	lds	r18, 0x0086
 41a:	30 91 87 00 	lds	r19, 0x0087
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 41e:	80 91 6b 00 	lds	r24, 0x006B
 422:	86 ff       	sbrs	r24, 6
 424:	16 c0       	rjmp	.+44     	; 0x452 <usbPoll+0x1e4>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 426:	4c 2f       	mov	r20, r28
 428:	41 50       	subi	r20, 0x01	; 1
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	ac e6       	ldi	r26, 0x6C	; 108
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	cd 01       	movw	r24, r26
 432:	02 96       	adiw	r24, 0x02	; 2
 434:	84 0f       	add	r24, r20
 436:	95 1f       	adc	r25, r21
 438:	f9 01       	movw	r30, r18
 43a:	11 96       	adiw	r26, 0x01	; 1
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 43c:	64 91       	lpm	r22, Z
                    *data++ = c;
 43e:	6d 93       	st	X+, r22
                    r++;
 440:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 442:	a8 17       	cp	r26, r24
 444:	b9 07       	cpc	r27, r25
 446:	d1 f7       	brne	.-12     	; 0x43c <usbPoll+0x1ce>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 448:	2f 5f       	subi	r18, 0xFF	; 255
 44a:	3f 4f       	sbci	r19, 0xFF	; 255
 44c:	42 0f       	add	r20, r18
 44e:	53 1f       	adc	r21, r19
 450:	15 c0       	rjmp	.+42     	; 0x47c <__stack+0x1d>
 452:	6c 2f       	mov	r22, r28
 454:	61 50       	subi	r22, 0x01	; 1
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	ec e6       	ldi	r30, 0x6C	; 108
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	cf 01       	movw	r24, r30
 45e:	02 96       	adiw	r24, 0x02	; 2
 460:	86 0f       	add	r24, r22
 462:	97 1f       	adc	r25, r23
 464:	d9 01       	movw	r26, r18
 466:	31 96       	adiw	r30, 0x01	; 1
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 468:	4d 91       	ld	r20, X+
 46a:	41 93       	st	Z+, r20
                    r++;
                }while(--i);
 46c:	e8 17       	cp	r30, r24
 46e:	f9 07       	cpc	r31, r25
 470:	d9 f7       	brne	.-10     	; 0x468 <__stack+0x9>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 472:	a9 01       	movw	r20, r18
 474:	4f 5f       	subi	r20, 0xFF	; 255
 476:	5f 4f       	sbci	r21, 0xFF	; 255
 478:	46 0f       	add	r20, r22
 47a:	57 1f       	adc	r21, r23
                do{
                    *data++ = *((uchar *)r);
                    r++;
                }while(--i);
            }
            usbMsgPtr = r;
 47c:	50 93 87 00 	sts	0x0087, r21
 480:	40 93 86 00 	sts	0x0086, r20
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 484:	8d e6       	ldi	r24, 0x6D	; 109
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	6c 2f       	mov	r22, r28
 48a:	41 d0       	rcall	.+130    	; 0x50e <usbCrc16Append>
        len += 4;           /* length including sync byte */
 48c:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 48e:	cc 30       	cpi	r28, 0x0C	; 12
 490:	18 f4       	brcc	.+6      	; 0x498 <__stack+0x39>
            usbMsgLen = USB_NO_MSG;
 492:	8f ef       	ldi	r24, 0xFF	; 255
 494:	80 93 63 00 	sts	0x0063, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 498:	c0 93 62 00 	sts	0x0062, r28
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 49c:	80 b3       	in	r24, 0x10	; 16
 49e:	84 71       	andi	r24, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 4a0:	89 f4       	brne	.+34     	; 0x4c4 <__stack+0x65>
 4a2:	83 e1       	ldi	r24, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 4a4:	90 b3       	in	r25, 0x10	; 16
 4a6:	94 71       	andi	r25, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 4a8:	69 f4       	brne	.+26     	; 0x4c4 <__stack+0x65>
 4aa:	81 50       	subi	r24, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 4ac:	d9 f7       	brne	.-10     	; 0x4a4 <__stack+0x45>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 4ae:	10 92 89 00 	sts	0x0089, r1
    usbDeviceAddr = 0;
 4b2:	10 92 83 00 	sts	0x0083, r1
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <__stack+0x65>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 4b8:	8d e6       	ldi	r24, 0x6D	; 109
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	6c 2f       	mov	r22, r28
 4be:	27 d0       	rcall	.+78     	; 0x50e <usbCrc16Append>
        len += 4;           /* length including sync byte */
 4c0:	cc 5f       	subi	r28, 0xFC	; 252
 4c2:	e7 cf       	rjmp	.-50     	; 0x492 <__stack+0x33>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 4ca:	85 b7       	in	r24, 0x35	; 53
 4cc:	82 60       	ori	r24, 0x02	; 2
 4ce:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 4d0:	8b b7       	in	r24, 0x3b	; 59
 4d2:	80 64       	ori	r24, 0x40	; 64
 4d4:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 4d6:	8b e4       	ldi	r24, 0x4B	; 75
 4d8:	80 93 78 00 	sts	0x0078, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 4dc:	8a e5       	ldi	r24, 0x5A	; 90
 4de:	80 93 77 00 	sts	0x0077, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 4e2:	08 95       	ret

000004e4 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 4e4:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 4e6:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 4e8:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 4ec:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 4ee:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 4f0:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 4f2:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 4f4:	09 c0       	rjmp	.+18     	; 0x508 <usbCrcLoopEntry>

000004f6 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 4f6:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 4f8:	82 27       	eor	r24, r18

000004fa <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 4fa:	97 95       	ror	r25
    ror     resCrcL
 4fc:	87 95       	ror	r24
    brcs    usbCrcNoXor
 4fe:	10 f0       	brcs	.+4      	; 0x504 <usbCrcNoXor>
    eor     resCrcL, polyL
 500:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 502:	95 27       	eor	r25, r21

00000504 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 504:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 506:	c8 f3       	brcs	.-14     	; 0x4fa <usbCrcBitLoop>

00000508 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 508:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 50a:	a8 f3       	brcs	.-22     	; 0x4f6 <usbCrcByteLoop>

0000050c <usbCrcReady>:
usbCrcReady:
    ret
 50c:	08 95       	ret

0000050e <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 50e:	ea df       	rcall	.-44     	; 0x4e4 <usbCrc16>
    st      ptr+, resCrcL
 510:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 512:	9d 93       	st	X+, r25
    ret
 514:	08 95       	ret

00000516 <__vector_1>:
; Numbers in brackets are clocks counted from center of last sync bit
; when instruction starts

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
 516:	cf 93       	push	r28
    in      YL, SREG            ;[-23]
 518:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-22]
 51a:	cf 93       	push	r28
    push    YH                  ;[-20]
 51c:	df 93       	push	r29

0000051e <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 51e:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 520:	84 9b       	sbis	0x10, 4	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 522:	e9 f7       	brne	.-6      	; 0x51e <waitForJ>

00000524 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 524:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK              ;[-14]
 526:	0b c0       	rjmp	.+22     	; 0x53e <foundK>
    sbis    USBIN, USBMINUS
 528:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 52a:	09 c0       	rjmp	.+18     	; 0x53e <foundK>
    sbis    USBIN, USBMINUS
 52c:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 52e:	07 c0       	rjmp	.+14     	; 0x53e <foundK>
    sbis    USBIN, USBMINUS
 530:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 532:	05 c0       	rjmp	.+10     	; 0x53e <foundK>
    sbis    USBIN, USBMINUS
 534:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 536:	03 c0       	rjmp	.+6      	; 0x53e <foundK>
    sbis    USBIN, USBMINUS
 538:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 53a:	01 c0       	rjmp	.+2      	; 0x53e <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 53c:	8b c0       	rjmp	.+278    	; 0x654 <sofError>

0000053e <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-12]
 53e:	6f 93       	push	r22
;   [---]                       ;[-11]
    lds     YL, usbInputBufOffset;[-10]
 540:	c0 91 85 00 	lds	r28, 0x0085
;   [---]                       ;[-9]
    clr     YH                  ;[-8]
 544:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
 546:	c4 57       	subi	r28, 0x74	; 116
    sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
 548:	df 4f       	sbci	r29, 0xFF	; 255
    push    shift               ;[-5]
 54a:	2f 93       	push	r18
;   [---]                       ;[-4]
    ldi     bitcnt, 0x55        ;[-3] [rx loop init]
 54c:	65 e5       	ldi	r22, 0x55	; 85
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 54e:	84 9b       	sbis	0x10, 4	; 16
    rjmp    haveTwoBitsK        ;[-1]
 550:	03 c0       	rjmp	.+6      	; 0x558 <haveTwoBitsK>
    pop     shift               ;[0] undo the push from before
 552:	2f 91       	pop	r18
    pop     bitcnt              ;[2] undo the push from before
 554:	6f 91       	pop	r22
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 556:	e6 cf       	rjmp	.-52     	; 0x524 <waitForK>

00000558 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1              ;[1]
 558:	0f 93       	push	r16
    push    x2              ;[3]
 55a:	1f 93       	push	r17
    push    x3              ;[5]
 55c:	4f 93       	push	r20
    ldi     shift, 0        ;[7]
 55e:	20 e0       	ldi	r18, 0x00	; 0
    ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
 560:	40 e1       	ldi	r20, 0x10	; 16
    push    x4              ;[9] == leap
 562:	5f 93       	push	r21

    in      x1, USBIN       ;[11] <-- sample bit 0
 564:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK     ;[12]
 566:	04 71       	andi	r16, 0x14	; 20
    bst     x1, USBMINUS    ;[13]
 568:	04 fb       	bst	r16, 4
    bld     shift, 7        ;[14]
 56a:	27 f9       	bld	r18, 7
    push    cnt             ;[15]
 56c:	3f 93       	push	r19
    ldi     leap, 0         ;[17] [rx loop init]
 56e:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
 570:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[19] arrives at [21]
 572:	39 c0       	rjmp	.+114    	; 0x5e6 <rxbit1>

00000574 <unstuff6>:

; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
; accordingly to approximate this value in the long run.

unstuff6:
    andi    x2, USBMASK ;[03]
 574:	14 71       	andi	r17, 0x14	; 20
    ori     x3, 1<<6    ;[04] will not be shifted any more
 576:	40 64       	ori	r20, 0x40	; 64
    andi    shift, ~0x80;[05]
 578:	2f 77       	andi	r18, 0x7F	; 127
    mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
 57a:	01 2f       	mov	r16, r17
    subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
 57c:	5f 5f       	subi	r21, 0xFF	; 255
    rjmp    didUnstuff6 ;[08]
 57e:	1e c0       	rjmp	.+60     	; 0x5bc <didUnstuff6>

00000580 <unstuff7>:

unstuff7:
    ori     x3, 1<<7    ;[09] will not be shifted any more
 580:	40 68       	ori	r20, 0x80	; 128
    in      x2, USBIN   ;[00] [10]  re-sample bit 7
 582:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;[01]
 584:	14 71       	andi	r17, 0x14	; 20
    andi    shift, ~0x80;[02]
 586:	2f 77       	andi	r18, 0x7F	; 127
    subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
 588:	52 50       	subi	r21, 0x02	; 2
    rjmp    didUnstuff7 ;[04]
 58a:	1f c0       	rjmp	.+62     	; 0x5ca <didUnstuff7>

0000058c <unstuffEven>:

unstuffEven:
    ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
 58c:	40 64       	ori	r20, 0x40	; 64
    in      x1, USBIN   ;[00] [10]
 58e:	00 b3       	in	r16, 0x10	; 16
    andi    shift, ~0x80;[01]
 590:	2f 77       	andi	r18, 0x7F	; 127
    andi    x1, USBMASK ;[02]
 592:	04 71       	andi	r16, 0x14	; 20
    breq    se0         ;[03]
 594:	d1 f1       	breq	.+116    	; 0x60a <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 596:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 598:	00 c0       	rjmp	.+0      	; 0x59a <unstuffEven+0xe>
    rjmp    didUnstuffE ;[06]
 59a:	23 c0       	rjmp	.+70     	; 0x5e2 <didUnstuffE>

0000059c <unstuffOdd>:

unstuffOdd:
    ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
 59c:	40 62       	ori	r20, 0x20	; 32
    in      x2, USBIN   ;[00] [10]
 59e:	10 b3       	in	r17, 0x10	; 16
    andi    shift, ~0x80;[01]
 5a0:	2f 77       	andi	r18, 0x7F	; 127
    andi    x2, USBMASK ;[02]
 5a2:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[03]
 5a4:	91 f1       	breq	.+100    	; 0x60a <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 5a6:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <unstuffOdd+0xe>
    rjmp    didUnstuffO ;[06]
 5aa:	25 c0       	rjmp	.+74     	; 0x5f6 <didUnstuffO>

000005ac <rxByteLoop>:

rxByteLoop:
    andi    x1, USBMASK ;[03]
 5ac:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[04]
 5ae:	10 27       	eor	r17, r16
    subi    leap, 1     ;[05]
 5b0:	51 50       	subi	r21, 0x01	; 1
    brpl    skipLeap    ;[06]
 5b2:	12 f4       	brpl	.+4      	; 0x5b8 <skipLeap>
    subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
 5b4:	5d 5f       	subi	r21, 0xFD	; 253
	...

000005b8 <skipLeap>:
    nop                 ;1
skipLeap:
    subi    x2, 1       ;[08]
 5b8:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[09]
 5ba:	27 95       	ror	r18

000005bc <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0xfc ;[10]
 5bc:	2c 3f       	cpi	r18, 0xFC	; 252
    in      x2, USBIN   ;[00] [11] <-- sample bit 7
 5be:	10 b3       	in	r17, 0x10	; 16
    brcc    unstuff6    ;[01]
 5c0:	c8 f6       	brcc	.-78     	; 0x574 <unstuff6>
    andi    x2, USBMASK ;[02]
 5c2:	14 71       	andi	r17, 0x14	; 20
    eor     x1, x2      ;[03]
 5c4:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 5c6:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 5c8:	27 95       	ror	r18

000005ca <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0xfc ;[06]
 5ca:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuff7    ;[07]
 5cc:	c8 f6       	brcc	.-78     	; 0x580 <unstuff7>
    eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
 5ce:	42 27       	eor	r20, r18
    st      y+, x3      ;[09] store data
 5d0:	49 93       	st	Y+, r20

000005d2 <rxBitLoop>:
rxBitLoop:
    in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
 5d2:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK ;[01]
 5d4:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[02]
 5d6:	10 27       	eor	r17, r16
    andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
 5d8:	4f 73       	andi	r20, 0x3F	; 63
    subi    x2, 1       ;[04]
 5da:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[05]
 5dc:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 5de:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffEven ;[07]
 5e0:	a8 f6       	brcc	.-86     	; 0x58c <unstuffEven>

000005e2 <didUnstuffE>:
didUnstuffE:
    lsr     x3          ;[08]
 5e2:	46 95       	lsr	r20
    lsr     x3          ;[09]
 5e4:	46 95       	lsr	r20

000005e6 <rxbit1>:
rxbit1:
    in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
 5e6:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;[01]
 5e8:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[02]
 5ea:	79 f0       	breq	.+30     	; 0x60a <se0>
    eor     x1, x2      ;[03]
 5ec:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 5ee:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 5f0:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 5f2:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffOdd  ;[07]
 5f4:	98 f6       	brcc	.-90     	; 0x59c <unstuffOdd>

000005f6 <didUnstuffO>:
didUnstuffO:
    subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
 5f6:	6b 5a       	subi	r22, 0xAB	; 171
    brcs    rxBitLoop   ;[09]
 5f8:	60 f3       	brcs	.-40     	; 0x5d2 <rxBitLoop>

    subi    cnt, 1      ;[10]
 5fa:	31 50       	subi	r19, 0x01	; 1
    in      x1, USBIN   ;[00] [11] <-- sample bit 6
 5fc:	00 b3       	in	r16, 0x10	; 16
    brcc    rxByteLoop  ;[01]
 5fe:	b0 f6       	brcc	.-84     	; 0x5ac <rxByteLoop>
    rjmp    overflow
 600:	00 c0       	rjmp	.+0      	; 0x602 <overflow>

00000602 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 602:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 604:	1a bf       	out	0x3a, r17	; 58

00000606 <ignorePacket>:
ignorePacket:
    clr     token
 606:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 608:	19 c0       	rjmp	.+50     	; 0x63c <handleSetupOrOut>

0000060a <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 60a:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 60c:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 60e:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 610:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 612:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 614:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 616:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 618:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 61a:	09 f1       	breq	.+66     	; 0x65e <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 61c:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 61e:	f9 f0       	breq	.+62     	; 0x65e <handleData>
    lds     shift, usbDeviceAddr;[17]
 620:	20 91 83 00 	lds	r18, 0x0083
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 624:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 626:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 628:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 62a:	ed cf       	rjmp	.-38     	; 0x606 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 62c:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 62e:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 630:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 632:	51 f1       	breq	.+84     	; 0x688 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 634:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 636:	11 f0       	breq	.+4      	; 0x63c <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 638:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 63a:	29 f7       	brne	.-54     	; 0x606 <ignorePacket>

0000063c <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 63c:	00 93 8a 00 	sts	0x008A, r16

00000640 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 640:	3f 91       	pop	r19
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	1f 91       	pop	r17
 648:	0f 91       	pop	r16
 64a:	2f 91       	pop	r18
 64c:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
 64e:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 650:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 652:	65 cf       	rjmp	.-310    	; 0x51e <waitForJ>

00000654 <sofError>:
sofError:
    POP_RETI                    ;macro call
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	cf bf       	out	0x3f, r28	; 63
 65a:	cf 91       	pop	r28
    reti
 65c:	18 95       	reti

0000065e <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 65e:	20 91 8a 00 	lds	r18, 0x008A
    tst     shift               ;[20]
 662:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 664:	69 f3       	breq	.-38     	; 0x640 <doReturn>
    lds     x2, usbRxLen        ;[22]
 666:	10 91 88 00 	lds	r17, 0x0088
    tst     x2                  ;[24]
 66a:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 66c:	91 f5       	brne	.+100    	; 0x6d2 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 66e:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 670:	92 f1       	brmi	.+100    	; 0x6d6 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 672:	30 93 88 00 	sts	0x0088, r19
    sts     usbRxToken, shift   ;[30]
 676:	20 93 84 00 	sts	0x0084, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 67a:	10 91 85 00 	lds	r17, 0x0085
    ldi     cnt, USB_BUFSIZE    ;[34]
 67e:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 680:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 682:	30 93 85 00 	sts	0x0085, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 686:	27 c0       	rjmp	.+78     	; 0x6d6 <sendAckAndReti>

00000688 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 688:	00 91 88 00 	lds	r16, 0x0088
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 68c:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 68e:	0c f5       	brge	.+66     	; 0x6d2 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 690:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 692:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 694:	49 f4       	brne	.+18     	; 0x6a8 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 696:	30 91 62 00 	lds	r19, 0x0062
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 69a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 69c:	1d c0       	rjmp	.+58     	; 0x6d8 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 69e:	00 93 62 00 	sts	0x0062, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 6a2:	cc e6       	ldi	r28, 0x6C	; 108
    ldi     YH, hi8(usbTxBuf)   ;[44]
 6a4:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 6a6:	1c c0       	rjmp	.+56     	; 0x6e0 <usbSendAndReti>

000006a8 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 6a8:	30 91 77 00 	lds	r19, 0x0077
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 6ac:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 6ae:	14 c0       	rjmp	.+40     	; 0x6d8 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 6b0:	00 93 77 00 	sts	0x0077, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 6b4:	c8 e7       	ldi	r28, 0x78	; 120
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 6b6:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 6b8:	13 c0       	rjmp	.+38     	; 0x6e0 <usbSendAndReti>

000006ba <bitstuffN>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuffN:
    eor     x1, x4          ;[5]
 6ba:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 6bc:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[7]
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <bitstuffN+0x6>
    nop                     ;[9]
 6c0:	00 00       	nop
    out     USBOUT, x1      ;[10] <-- out
 6c2:	02 bb       	out	0x12, r16	; 18
    rjmp    didStuffN       ;[0]
 6c4:	1a c0       	rjmp	.+52     	; 0x6fa <didStuffN>

000006c6 <bitstuff6>:
    
bitstuff6:
    eor     x1, x4          ;[5]
 6c6:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6] Carry is zero due to brcc
 6c8:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[7] compensate for ror shift at branch destination
 6ca:	22 1f       	adc	r18, r18
    rjmp    didStuff6       ;[8]
 6cc:	1d c0       	rjmp	.+58     	; 0x708 <didStuff6>

000006ce <bitstuff7>:

bitstuff7:
    ldi     x2, 0           ;[2] Carry is zero due to brcc
 6ce:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff7       ;[3]
 6d0:	21 c0       	rjmp	.+66     	; 0x714 <didStuff7>

000006d2 <sendNakAndReti>:


sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
 6d2:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <sendX3AndReti>

000006d6 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 6d6:	32 ed       	ldi	r19, 0xD2	; 210

000006d8 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
 6d8:	43 2f       	mov	r20, r19

000006da <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
 6da:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
 6dc:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 6de:	32 e0       	ldi	r19, 0x02	; 2

000006e0 <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 6e0:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK     ;[-11]
 6e2:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 6e4:	94 9a       	sbi	0x12, 4	; 18
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 6e6:	02 b3       	in	r16, 0x12	; 18
    out     USBDDR, x2      ;[-7] <- acquire bus
 6e8:	11 bb       	out	0x11, r17	; 17
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 6ea:	54 e1       	ldi	r21, 0x14	; 20
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 6ec:	20 e8       	ldi	r18, 0x80	; 128

000006ee <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
 6ee:	65 e3       	ldi	r22, 0x35	; 53

000006f0 <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [7]
 6f0:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [8]
 6f2:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [9] <-- out N
 6f4:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0] [10]
 6f6:	27 95       	ror	r18
    ror     x2              ;[1]
 6f8:	17 95       	ror	r17

000006fa <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 6fa:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 6fc:	f0 f6       	brcc	.-68     	; 0x6ba <bitstuffN>
    lsr     bitcnt          ;[4]
 6fe:	66 95       	lsr	r22
    brcc    txBitLoop       ;[5]
 700:	b8 f7       	brcc	.-18     	; 0x6f0 <txBitLoop>
    brne    txBitLoop       ;[6]
 702:	b1 f7       	brne	.-20     	; 0x6f0 <txBitLoop>

    sbrs    shift, 0        ;[7]
 704:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 706:	05 27       	eor	r16, r21

00000708 <didStuff6>:
didStuff6:
    out     USBOUT, x1      ;[-1] [9] <-- out 6
 708:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0] [10]
 70a:	27 95       	ror	r18
    ror     x2              ;[1]
 70c:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[2]
 70e:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff6       ;[3]
 710:	d0 f6       	brcc	.-76     	; 0x6c6 <bitstuff6>
    ror     shift           ;[4]
 712:	27 95       	ror	r18

00000714 <didStuff7>:
didStuff7:
    ror     x2              ;[5]
 714:	17 95       	ror	r17
    sbrs    x2, 7           ;[6]
 716:	17 ff       	sbrs	r17, 7
    eor     x1, x4          ;[7]
 718:	05 27       	eor	r16, r21
    nop                     ;[8]
 71a:	00 00       	nop
    cpi     x2, 0xfc        ;[9]
 71c:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;[-1][10] <-- out 7
 71e:	02 bb       	out	0x12, r16	; 18
    brcc    bitstuff7       ;[0] [11]
 720:	b0 f6       	brcc	.-84     	; 0x6ce <bitstuff7>
    ld      shift, y+       ;[1]
 722:	29 91       	ld	r18, Y+
    dec     cnt             ;[3]
 724:	3a 95       	dec	r19
    brne    txByteLoop      ;[4]
 726:	19 f7       	brne	.-58     	; 0x6ee <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 728:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[6]
 72a:	10 91 89 00 	lds	r17, 0x0089
    lsl     x2              ;[8] we compare with left shifted address
 72e:	11 0f       	add	r17, r17
    subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
 730:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[10]
 732:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 734:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[0]
 736:	11 f0       	breq	.+4      	; 0x73c <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 738:	10 93 83 00 	sts	0x0083, r17

0000073c <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
 73c:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[3]
 73e:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[4]
 740:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR      ;[5]
 742:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK     ;[6] set both pins to input
 744:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1          ;[7]
 746:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[8] configure no pullup on both pins
 748:	4b 7e       	andi	r20, 0xEB	; 235
    ldi     x4, 4           ;[9]
 74a:	54 e0       	ldi	r21, 0x04	; 4

0000074c <se0Delay>:
se0Delay:
    dec     x4              ;[10] [13] [16] [19]
 74c:	5a 95       	dec	r21
    brne    se0Delay        ;[11] [14] [17] [20]
 74e:	f1 f7       	brne	.-4      	; 0x74c <se0Delay>
    out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
 750:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2      ;[22] <-- release bus now
 752:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
 754:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 756:	74 cf       	rjmp	.-280    	; 0x640 <doReturn>

00000758 <_exit>:
 758:	f8 94       	cli

0000075a <__stop_program>:
 75a:	ff cf       	rjmp	.-2      	; 0x75a <__stop_program>
